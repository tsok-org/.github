name: NX Workspace Migration

on:
  workflow_call:
    inputs:
      base_branch:
        description: "Base branch to create PR against"
        required: false
        type: string
        default: "main"
      actor:
        description: "GitHub actor (for PR assignment)"
        required: false
        type: string
        default: "github-actions[bot]"
      node_version:
        description: "Node.js version (e.g., '20' or '20.11.0')"
        required: false
        type: string
      node_version_file:
        description: "Path to .node-version/.nvmrc file"
        required: false
        type: string
        default: ".node-version"
      version:
        description: "Explicit Nx version to migrate to"
        required: false
        type: string
      channel:
        description: "Release channel: 'stable', 'rc', 'beta', or 'canary'"
        required: false
        type: string
        default: "stable"
      major_version:
        description: "Major version (optional, for pinning)"
        required: false
        type: string
      minor_version:
        description: "Minor version (optional, for pinning)"
        required: false
        type: string
      branch_name_template:
        description: "Branch name template (must include {version})"
        required: false
        type: string
        default: "update-nx-{version}"
      create_pr:
        description: "Whether to create a PR"
        required: false
        type: boolean
        default: true
      pr_title_template:
        description: "PR title template"
        required: false
        type: string
        default: "build: ðŸ“¦ update Nx to {version}"
      pr_labels:
        description: "Comma-separated PR labels"
        required: false
        type: string
        default: "dependencies"
      pr_auto_merge:
        description: "Enable auto-merge after checks"
        required: false
        type: boolean
        default: true
      commit_message_template:
        description: "Commit message template"
        required: false
        type: string
        default: "build: ðŸ“¦ update @nx/workspace to {version}"
      github_app_id:
        description: "GitHub App ID (if using GitHub App tokens)"
        required: false
        type: string
    secrets:
      github_user_token:
        required: false
      github_app_private_key:
        required: false
      nx_cloud_access_token:
        required: false
    outputs:
      migration_version:
        value: ${{ jobs.nx-migrate.outputs.migration_version }}
      pr_number:
        value: ${{ jobs.nx-migrate.outputs.pr_number }}
      pr_url:
        value: ${{ jobs.nx-migrate.outputs.pr_url }}
      has_changes:
        value: ${{ jobs.nx-migrate.outputs.has_changes }}

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.nx_cloud_access_token }}

jobs:
  nx-migrate:
    runs-on: ubuntu-latest
    name: NX Workspace Migration
    outputs:
      migration_version: ${{ steps.nx-version.outputs.latest_version }}
      pr_number: ${{ steps.push-and-pr.outputs.pr_number }}
      pr_url: ${{ steps.push-and-pr.outputs.pr_url }}
      has_changes: ${{ steps.check-changes.outputs.has_changes }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ${{ inputs.node_version_file }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Get current and latest Nx version
        id: nx-version
        run: |
          CURRENT_VERSION=$(jq -r '.devDependencies."@nx/devkit" // .devDependencies."@nx/workspace" // .devDependencies.nx' package.json)
          echo "Current version: $CURRENT_VERSION"

          CHANNEL="${{ inputs.channel }}"
          MAJOR="${{ inputs.major_version }}"
          MINOR="${{ inputs.minor_version }}"

          ALL_VERSIONS=$(npm view @nx/workspace versions --json | jq -r '.[]')
          echo "Fetched $(echo "$ALL_VERSIONS" | wc -l) versions from npm."

          filter_versions() {
            local pattern="$1"
            echo "$ALL_VERSIONS" | grep -E "$pattern" || true
          }

          case "$CHANNEL" in
            canary)
              echo "Channel: canary (includes canary, beta, rc, stable)"
              MATCHED=$(filter_versions '-canary\.| -beta\.| -rc\.|^[0-9]+\.[0-9]+\.[0-9]+$')
              ;;
            beta)
              echo "Channel: beta (includes beta, rc, stable)"
              MATCHED=$(filter_versions '-beta\.| -rc\.|^[0-9]+\.[0-9]+\.[0-9]+$')
              ;;
            rc)
              echo "Channel: rc (includes rc, stable)"
              MATCHED=$(filter_versions '-rc\.|^[0-9]+\.[0-9]+\.[0-9]+$')
              ;;
            stable)
              echo "Channel: stable (only stable releases)"
              MATCHED=$(filter_versions '^[0-9]+\.[0-9]+\.[0-9]+$')
              ;;
            *)
              echo "::error::Invalid channel: $CHANNEL"
              exit 1
              ;;
          esac

          if [ -n "$MAJOR" ]; then
            MATCHED=$(echo "$MATCHED" | grep "^$MAJOR\." || true)
          fi

          if [ -n "$MINOR" ]; then
            MATCHED=$(echo "$MATCHED" | grep "^$MAJOR\.$MINOR\." || true)
          fi

          if [ -z "$MATCHED" ]; then
            echo "::error::No versions matched the criteria"
            exit 1
          fi

          LATEST_VERSION=$(echo "$MATCHED" | sort -V | tail -1)
          echo "Latest version: $LATEST_VERSION"

          echo "current_version=$CURRENT_VERSION" >> "$GITHUB_OUTPUT"
          echo "latest_version=$LATEST_VERSION" >> "$GITHUB_OUTPUT"

      - name: Check if update needed
        id: check
        run: |
          if [ "${{ steps.nx-version.outputs.current_version }}" != "${{ steps.nx-version.outputs.latest_version }}" ]; then
            echo "should_update=true" >> "$GITHUB_OUTPUT"
          else
            echo "should_update=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Exit early if up to date
        if: steps.check.outputs.should_update == 'false'
        run: echo "Already up to date."

      - name: Create branch and migrate
        if: steps.check.outputs.should_update == 'true'
        run: |
          VERSION="${{ steps.nx-version.outputs.latest_version }}"
          BRANCH="update-nx-$VERSION"
          git checkout -b "$BRANCH"

          npx nx migrate "$VERSION"
          npm install
          npx nx migrate --run-migrations
          git add .
          git commit -m "build: ðŸ“¦ update Nx to $VERSION"
          git push origin "$BRANCH"

      - name: Create PR
        if: steps.check.outputs.should_update == 'true' && inputs.create_pr == true
        env:
          GITHUB_TOKEN: ${{ secrets.github_user_token || github.token }}
        run: |
          VERSION="${{ steps.nx-version.outputs.latest_version }}"
          TITLE="build: ðŸ“¦ update Nx to $VERSION"
          BODY="Automated Nx migration from ${{ steps.nx-version.outputs.current_version }} to $VERSION"
          gh pr create --title "$TITLE" --body "$BODY" --head "update-nx-$VERSION" --base "${{ inputs.base_branch }}" --label "${{ inputs.pr_labels }}"
