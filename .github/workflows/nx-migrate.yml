name: NX Workspace Migration

on:
  workflow_call:
    inputs:
      base_branch:
        description: "Base branch to create PR against"
        required: false
        type: string
        default: "main"
      actor:
        description: "GitHub actor (for PR assignment)"
        required: false
        type: string
        default: "github-actions[bot]"
      node_version:
        description: "Node.js version to use (e.g., '20', '20.11.0')"
        required: false
        type: string
      node_version_file:
        description: "File to read Node.js version from (e.g., .node-version)"
        required: false
        type: string
        default: ".node-version"
      version:
        description: "Explicit Nx version to migrate to"
        required: false
        type: string
      channel:
        description: "Nx release channel (stable, rc, beta, canary)"
        required: false
        type: string
        default: "stable"
      major_version:
        description: "Optional major version filter (e.g., '22')"
        required: false
        type: string
      minor_version:
        description: "Optional minor version filter (e.g., '0')"
        required: false
        type: string
      branch_name_template:
        description: "Branch name template, must include {version}"
        required: false
        type: string
        default: "update-nx-{version}"
      create_pr:
        description: "Whether to create a PR automatically"
        required: false
        type: boolean
        default: true
      pr_title_template:
        description: "PR title template"
        required: false
        type: string
        default: "build: 📦 update Nx to {version}"
      pr_labels:
        description: "Comma-separated PR labels"
        required: false
        type: string
        default: "dependencies"
      pr_auto_merge:
        description: "Enable PR auto-merge"
        required: false
        type: boolean
        default: true
      commit_message_template:
        description: "Commit message template"
        required: false
        type: string
        default: "build: 📦 update @nx/workspace to {version}"
      github_app_id:
        description: "GitHub App ID (if used)"
        required: false
        type: string
    secrets:
      github_user_token:
        required: false
      github_app_private_key:
        required: false
      nx_cloud_access_token:
        required: false
    outputs:
      migration_version:
        value: ${{ jobs.nx-migrate.outputs.migration_version }}
      pr_number:
        value: ${{ jobs.nx-migrate.outputs.pr_number }}
      pr_url:
        value: ${{ jobs.nx-migrate.outputs.pr_url }}
      has_changes:
        value: ${{ jobs.nx-migrate.outputs.has_changes }}

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.nx_cloud_access_token }}

jobs:
  nx-migrate:
    name: NX Workspace Migration
    runs-on: ubuntu-latest
    outputs:
      migration_version: ${{ steps.nx-version.outputs.latest_version }}
      pr_number: ${{ steps.push-and-pr.outputs.pr_number }}
      pr_url: ${{ steps.push-and-pr.outputs.pr_url }}
      has_changes: ${{ steps.check-changes.outputs.has_changes }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ${{ inputs.node_version_file }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      # ------------------------------
      # 🔍 Version detection and filtering
      # ------------------------------
      - name: Get current and latest Nx version
        id: nx-version
        run: |
          echo "🔍 Fetching Nx versions from npm..."
          CURRENT_VERSION=$(jq -r '.devDependencies."@nx/devkit" // .devDependencies."@nx/workspace" // .devDependencies.nx' package.json)
          echo "Current version: $CURRENT_VERSION"

          CHANNEL="${{ inputs.channel }}"
          MAJOR="${{ inputs.major_version }}"
          MINOR="${{ inputs.minor_version }}"

          ALL_VERSIONS=$(npm view @nx/workspace versions --json | jq -r '.[]')

          # ✅ Strict semver filter allowing canary/beta/rc
          VALID_VERSIONS=$(echo "$ALL_VERSIONS" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-canary\.[0-9]+-[A-Za-z0-9]+)?(-beta\.[0-9]+)?(-rc\.[0-9]+)?$' || true)
          echo "Total valid semver versions: $(echo "$VALID_VERSIONS" | wc -l)"

          if [ -z "$VALID_VERSIONS" ]; then
            echo "::error::No valid semver versions found from npm registry."
            exit 1
          fi

          filter_versions() {
            local pattern="$1"
            echo "$VALID_VERSIONS" | grep -E "$pattern" || true
          }

          case "$CHANNEL" in
            canary)
              echo "Channel: canary (includes canary, beta, rc, stable)"
              MATCHED=$(filter_versions '(-canary\.| -beta\.| -rc\.|^[0-9]+\.[0-9]+\.[0-9]+$)')
              ;;
            beta)
              echo "Channel: beta (includes beta, rc, stable)"
              MATCHED=$(filter_versions '(-beta\.| -rc\.|^[0-9]+\.[0-9]+\.[0-9]+$)')
              ;;
            rc)
              echo "Channel: rc (includes rc, stable)"
              MATCHED=$(filter_versions '(-rc\.|^[0-9]+\.[0-9]+\.[0-9]+$)')
              ;;
            stable)
              echo "Channel: stable (stable only)"
              MATCHED=$(filter_versions '^[0-9]+\.[0-9]+\.[0-9]+$')
              ;;
            *)
              echo "::error::Invalid channel: $CHANNEL"
              exit 1
              ;;
          esac

          if [ -n "$MAJOR" ]; then
            MATCHED=$(echo "$MATCHED" | grep "^$MAJOR\." || true)
          fi

          if [ -n "$MINOR" ]; then
            MATCHED=$(echo "$MATCHED" | grep "^$MAJOR\.$MINOR\." || true)
          fi

          if [ -z "$MATCHED" ]; then
            echo "::error::No versions matched after filtering."
            echo "Channel: $CHANNEL | Major: $MAJOR | Minor: $MINOR"
            exit 1
          fi

          # Sort semantically
          LATEST_VERSION=$(echo "$MATCHED" | sort -V | tail -1)

          # Validate
          if ! echo "$LATEST_VERSION" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+(-canary\.[0-9]+-[A-Za-z0-9]+)?(-beta\.[0-9]+)?(-rc\.[0-9]+)?$'; then
            echo "::error::Invalid latest version detected: $LATEST_VERSION"
            exit 1
          fi

          echo "✅ Latest version: $LATEST_VERSION"
          echo "current_version=$CURRENT_VERSION" >> "$GITHUB_OUTPUT"
          echo "latest_version=$LATEST_VERSION" >> "$GITHUB_OUTPUT"

      # ------------------------------
      # ⚙️ Migration and PR handling
      # ------------------------------
      - name: Check if update needed
        id: check
        run: |
          if [ "${{ steps.nx-version.outputs.current_version }}" != "${{ steps.nx-version.outputs.latest_version }}" ]; then
            echo "should_update=true" >> "$GITHUB_OUTPUT"
          else
            echo "should_update=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Exit early if up to date
        if: steps.check.outputs.should_update == 'false'
        run: echo "✅ Nx workspace is already up to date."

      - name: Create branch and migrate
        if: steps.check.outputs.should_update == 'true'
        run: |
          VERSION="${{ steps.nx-version.outputs.latest_version }}"
          BRANCH="update-nx-$VERSION"
          git checkout -b "$BRANCH"

          echo "🚀 Running Nx migrate to $VERSION"
          npx nx migrate "$VERSION"
          npm install
          npx nx migrate --run-migrations
          git add .
          git commit -m "build: 📦 update Nx to $VERSION"
          git push origin "$BRANCH"

      - name: Create Pull Request
        if: steps.check.outputs.should_update == 'true' && inputs.create_pr == true
        env:
          GITHUB_TOKEN: ${{ secrets.github_user_token || github.token }}
        run: |
          VERSION="${{ steps.nx-version.outputs.latest_version }}"
          TITLE="${{ inputs.pr_title_template }}"
          TITLE="${TITLE//\{version\}/$VERSION}"

          BODY="### Nx Workspace Migration\n\n**Version:** ${{ steps.nx-version.outputs.current_version }} → $VERSION\n\nChannel: ${{ inputs.channel }}"

          gh pr create \
            --title "$TITLE" \
            --body "$BODY" \
            --head "update-nx-$VERSION" \
            --base "${{ inputs.base_branch }}" \
            --label "${{ inputs.pr_labels }}"
